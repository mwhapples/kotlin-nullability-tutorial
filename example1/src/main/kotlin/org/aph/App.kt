/*
 * This source file was generated by the Gradle 'init' task
 */
package org.aph

class WorkDialogService {
    private var dialog: TextDisplay? = null
    fun open(title: String, message: String) {
        /*
         * Possible solutions may have included:
         *  1. Non-null assertion operator (!!). Whilst making the compiler quiet does not fix possible issues and does not improve safety. It relies upon your reasoning to prevent errors.
         * 2. Make dialog lateinit. Not really suitable here as close sets dialog to null. Also, lateinit would not protect should there be incorrect use such as doWork being called before open.
         * 3. Create temp local variable for set up and after configuring set dialog from temp variable. This solves the issue as the local variable can be defined as non-null.
         * 4. Use scoping functions. Same idea as the local variable but more compact. This is the selected solution, using apply here but also may be used if you prefer having the object as a parameter to the block.
         */
        dialog = TextDisplay().apply {
            this.title = title
            this.message = message
            show()
        }
    }

    fun doWork(work: ((Int) -> Unit) -> Unit) {
        /*
         * Possible solutions:
         * 1. Non-null assertion operator (!!). This does not solve the issue and errors could still occur if API used incorrectly, such as doWork being called before open.
         * 2. Safe call operator (#.). This is the preferred solution if no exception is to be thrown, the call will be made if dialog is not null, otherwise the call is not made.
         */
        work { dialog?.progressUpdate(it) }
    }

    fun close() {
        /*
         * Possible solutions are the same as in doWork and the preferred solution is the same.
         */
        dialog?.done()
        dialog = null
    }
}

fun main() {
    val workDialog = WorkDialogService()
    workDialog.open(title = "Demo work", message = "Starting the long task")
    workDialog.doWork { updater ->
        for (i in 0..100 step 10) {
            updater(i)
            Thread.sleep(1000)
        }
    }
    workDialog.close()
}

/*
 * For the purposes of this example treat the following class as if it comes from a third party library and so should
 * not be changed.
 */
private class TextDisplay {
    var title: String = ""
    var message: String = ""
    fun show() {
        println("     $title")
        println(message)
    }

    fun progressUpdate(progress: Int) {
        println("Working $progress%")
    }

    fun done() {
        println("Done")
    }
}
